---
layout: post
title:  "Debugando Python dockerizado no PyCharm"
author: Rauan
date:   2024-01-21
tags: debug docker python tutorial
---

### `print()` my beloved

Eu passei um bom tempo usando `print()` para debugar c√≥digo Python que estava rodando em containers por n√£o saber
como usar o debugger de maneira adequada (d√£). Acho que descobri.

Como eu utilizo o <a href="https://www.jetbrains.com/pycharm/" target="_blank">PyCharm</a> (e talvez voc√™ devesse tamb√©m),
esse tutorial n√£o cobre <a href="https://code.visualstudio.com/" target="_blank">VS Code</a> ou
<a href="https://docs.python.org/3/library/pdb.html" target="_blank">pdb</a> puro.

Sigamos.

### Caso simples: Uma app boba

Digamos que voc√™ tem uma web app _Flask_ super complexa:

```python
from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello():
    my_return = "Hello, World!"
    return my_return

if __name__ == '__main__':
    app.run(host="0.0.0.0")
```

Dockerfile:

```dockerfile
FROM python:3.10
WORKDIR /
COPY . .
RUN pip3 install -r requirements.txt
CMD [ "python3", "./main.py"]
```
docker-compose.yml:
```yaml
version: "3.5"
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
```

* <small>Vou utilizar um _docker-compose.yml_ por ser √∫til para mapear portas e para adicionar outros servi√ßos (ex.: bd),
como veremos adiante.</small>

Bom, se tentarmos debugar utilizando o interpretador que est√° a√≠ no seu _venv_ (pf esteja usando um venv), vai funcionar,
por√©m, n√£o estar√≠amos debugando a aplica√ß√£o rodando no container e sim localmente. 
Temos que especificar um interpretador que esteja dentro do container que ser√° debugado.

Add novo interpretador "Docker Compose"

<img src="/images/pycharm-docker-debug/new_interpreter-1.gif" style="display:block;margin:0 auto">

* <small> Se preferir: menu > settings > project > python interpreter > add new interpreter </small>

Especifique o caminho do seu _docker-compose.yml_. 
Depois, escolha o nome do que deseja debugar, especificando o mesmo nome que foi utilizado no
_docker-compose.yml_. No nosso caso √© _app_. Clique `next`. 

<img src="/images/pycharm-docker-debug/new_interpreter-2.png" style="display:block;margin:0 auto">

* <small> Poderiam haver outros servi√ßos como bancos de dados ou caches que n√£o seriam alvo de debug </small>

Por √∫ltimo, escolhemos o interpretador. _System Interpreter_ > `/usr/local/bin/python3`, clique `create`.

<img src="/images/pycharm-docker-debug/new_interpreter-3.png" style="display:block;margin:0 auto">

* <small>Deixamos na op√ß√£o _System Interpreter_ pois n√£o tem necessidade de usar um venv dentro do container.</small>

Ok, interpretador criado!

O pr√≥ximo passo √© criar uma configura√ß√£o de _run/debug_, para rodar nosso programa utilizando o interpretador que acabamos
de criar. L√°√° em cima, do lado da <a href="https://www.google.com/search?q=quantas+pernas+tem+uma+barata" target="_blank">baratinha</a>:

<img src="/images/pycharm-docker-debug/run-debug-config.gif" style="display:block;margin:0 auto">

<br>
Clique no "+" e crie um novo perfil "Python"

Escolha o interpretador que foi criado e especifique o _entrypoint_ da sua aplica√ß√£o. Nesse caso √© o pr√≥prio `main.py`,
com o tipo "script". Clique `Apply`

<img src="/images/pycharm-docker-debug/run-debug-config.png" style="display:block;margin:0 auto">
* <small>Poderia ser um perfil "Flask", mas para ser mais gen√©rico vamos de "Python"</small>

ü§óProntoü§ó

Agora, coloque seus breakpoints e clique na baratinha para debugar.

### Caso menos simples: Uma app boba + um banco de dados

Bom, digamos que existam outros servi√ßos adjacentes √† sua aplica√ß√£o, como, por exemplo, um banco de dados.

docker-compose.yml:
```yaml
version: "3.5"
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
  mongo:
    extends:
      file: mongo.yml
      service: mongo
    volumes:
      - mongo_data:/data/db

volumes:
  mongo_data:
```

mongo.yml:
```yaml
version: "3.5"

services:
  mongo:
    image: mongo:5
    command: mongod --port 27017
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
```

Nesse caso, se seguirmos os passos da se√ß√£o anterior, nosso banco de dados nunca ser√° executado, pois o interpretador configurado s√≥
diz respeito √† aplica√ß√£o em si (_app_), e a configura√ß√£o de _run/debug_ tamb√©m, e apenas executa nosso programa a partir de um
_entrypoint_ pr√©-estabelecido (_main.py_).

Criaremos ent√£o outra configura√ß√£o de _run/debug_. Assim como antes, abra a aba de _run/debug_, e dessa vez,
clique no "+" e escolha uma config do tipo "Docker Compose".

<img src="/images/pycharm-docker-debug/run-debug-docker-compose.png" style="display:block;margin:0 auto">

Especifique o caminho do arquivo "docker-compose.yml".
Note, no campo "Services" est√° escrito: "Leave empty to run all services" (Deixe em branco para rodar todos os servi√ßos).

<img src="/images/pycharm-docker-debug/run-debug-docker-compose-2.png" style="display:block;margin:0 auto">

Ou seja, podemos deixar o campo em branco para que essa config de _run/debug_ rode os dois servi√ßos (_app_ e _mongo_), ou,
especificar apenas o servi√ßo _mongo_, uma vez que n√£o podemos "debugar" a _app_ utilizando essa config do tipo "Docker Compose".
Para debugar nossa _app_ de fato, utilizando breakpoints e tudo mais, √© necess√°rio utilizar a config criada anteriormente
que especifica o interpretador Dockerizado (criado l√° no in√≠cio) e o entrypoint (main.py nesse caso).

Por√©m, n√£o √© problema deixarmos essa nova config de _run/debug_ iniciar os dois servi√ßos e depois executarmos
a config criada anteriormente para ent√£o debugar nossa aplica√ß√£o. Por isso, pode deixar em branco, ou especificar apenas
_mongo_ na aba "Services".

Ok, agora √© s√≥ rodar (clicando na setinha do lado da barata) essa nova config para subir o mongo + app (ou s√≥ mongo), e depois rodar a config que criamos 
anteriormente para ent√£o debugar nossa aplica√ß√£o. 
<small>Lembre de usar a baratinha</small>

* <small>A app acaba nem chamando o mongo... mas poderia.</small>

### Debugando testes com _Pytest_

Se voc√™ precisa debugar seus testes, crie uma nova config de _run/debug_ do tipo
"Pytest". Escolha o interpretador criado anteriormente (aquele do container), e, se voc√™ estiver utilizando `pytest-cov` 
no seu projeto, no campo "Additional Arguments" coloque <a href="https://github.com/pytest-dev/pytest-cov/issues/131" target="_blank">`--no-cov`</a>.
Pronto, agora pode colocar seus breakpoints nos testes e debugar feliz da vida.

<img src="/images/pycharm-docker-debug/pytest-debug.png" style="display:block;margin:0 auto">

### Como estou dirigindo?

Se voc√™ tem alguma sugest√£o, dica, ou encontrou algum erro, pode deixar nos coment√°rios abaixo. (:

bye bye